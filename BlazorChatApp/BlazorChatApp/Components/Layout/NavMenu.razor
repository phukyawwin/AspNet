@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager
<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">BlazorChatApp</a>
	</div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
	<nav class="flex-column">

		<AuthorizeView>
			<Authorized>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="/home" Match="NavLinkMatch.All">
						<span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
					</NavLink>
				</div>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="/chat" Match="NavLinkMatch.All">
						<span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Chat
					</NavLink>
				</div>
				<div class="nav-item px-3">
					<form action="Account/Logout" method="post">
						<AntiforgeryToken />
						<button class="nav-link" @onclick="LogoutClicked">
							<span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span>Logout
						</button>
					</form>
				</div>

			</Authorized>
			<NotAuthorized>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="/Account/Login" Match="NavLinkMatch.All">
						<span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Login
					</NavLink>
				</div>
				<div class="nav-item px-3">
					<NavLink class="nav-link" href="/Account/Register" Match="NavLinkMatch.All">
						<span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Register
					</NavLink>
				</div>

			</NotAuthorized>
		</AuthorizeView>

	</nav>
</div>

@code{
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	private HubConnection? _hubConnection;
	protected override async Task OnInitializedAsync()
	{
		_hubConnection = new HubConnectionBuilder()
					.WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
					.Build();
		await _hubConnection.StartAsync();
	}
	async Task LogoutClicked(){
		string id = ((await authenticationState).User).Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)!.Value;
		await _hubConnection!.SendAsync("RemoveUserAsync", id);
	}
}