@page "/individual-chat"
@using BlazorChatApp.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorChatApp.Domain.DTOs;
@using BlazorChatApp.Domain.Entities
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using BlazorChatApp.Client.AppStates;
@inject MyHubConnectionService hubConnectionService
@inject AvailableUserState state
@rendermode InteractiveWebAssembly
<div class="row">
	<div class="col-lg-12">
		<div class="card-header sticky">@state.FullName</div>
		<div class="card" style="max-height:65vh; min-height:65vh; overflow:scroll;" id="chatContainer">
			<AuthorizeView>
				@foreach (var chat in individualChatDtos)
				{
					@* string position = chat.SenderName == context.User.Identity.Name ? "align-self-end" : "align-self-start"; *@
					@* string style = chat.SenderName == context.User.Identity.Name ? "margin-right:10px" : "margin-left:10px"; *@
					@* string Name = chat.SenderName == context.User.Identity.Name ? "You" : chat.SenderName; *@
					@* string Color = chat.SenderName == context.User.Identity.Name ? "text-primary" : "text-info"; *@
					bool isCurrentUser = chat.SenderId == context.User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)?.Value;

					string position = isCurrentUser ? "align-self-end" : "align-self-start";
					string style = isCurrentUser ? "margin-right:6px" : "margin-left:10px";
					string Name = isCurrentUser ? "You" : chat.SenderName;
					string Color = isCurrentUser ? "text-primary" : "text-info";
					<div class="card mt-1 mb-1 d-flex @position" style="width:500px; border-radius:10px; @style">
						<div class="card-header">
							<small class="@Color"><b>@Name</b></small><br />
							@chat.Message <br />
							<small class="text-muted">@chat.DateTime.ToString("dd MMM, yyyy hh:mm tt")</small>
						</div>
					</div>
				}
			</AuthorizeView>
		</div>
	</div>
</div>
<div class="row mt-3 mb-2">
	<div class="col-lg-4"></div>
	<div class="col-lg-4">
		<EditForm Model="individualChatModel" OnSubmit="SendIndividualChat">
			<DataAnnotationsValidator />
			<InputTextArea @bind-Value="individualChatModel.Message" class="form-control" placeholder="Message" />
			<button class="float-end btn btn-success mt-3" type="submit">Send</button>
		</EditForm>
	</div>
</div>
<div class="row">
	<div class="col-lg-12 d-flex justify-content-center">
		@if (!hubConnectionService.IsConnected)
		{
			<div class="alert alert-danger">Chat Disconnected</div>
		}
		else
		{
			<div class="alert alert-success">Chat Connected</div>
		}
	</div>
</div>

@code {
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	private List<IndividualChatDto> individualChatDtos { get; set; } = [];
	private IndividualChat individualChatModel { get; set; } = new();
	private HubConnection _hubConnection;
	protected override async Task OnInitializedAsync()
	{
		try
		{
			_hubConnection = hubConnectionService.GetConnection();

			_hubConnection.On<IndividualChatDto>("ReceiveIndividualMessage", (individualChat) =>
				{

					individualChatDtos.Add(individualChat);
					InvokeAsync(() => StateHasChanged());
				});


			var httpClient = new HttpClient();
			var user = new RequestChatDto()
				{
					SenderId = ((await authenticationState).User).Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value,
					ReceiverId = state.ReceiverId
				};
			var resposne = await httpClient.PostAsJsonAsync($"https://localhost:7134/api/chat/individual", user);
			individualChatDtos = await resposne.Content.ReadFromJsonAsync<List<IndividualChatDto>>();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error initializing chat: {ex.Message}");
		}

	}

	public async void SendIndividualChat()
	{
		individualChatModel.ReceiverId = state.ReceiverId;
		individualChatModel.SenderId =
		((await authenticationState).User).Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value;
		await _hubConnection!.SendAsync("AddIndividualChat", individualChatModel);
		var data = new IndividualChatDto()
			{
				SenderId = individualChatModel.SenderId,
				ReceiverId = individualChatModel.ReceiverId,
				Message = individualChatModel.Message,
				DateTime = individualChatModel.Date,
				SenderName = (await authenticationState).User.Identity!.Name,
				ReceiverName = state.FullName
			};
		individualChatDtos.Add(data);
		individualChatModel = new();
	}
}