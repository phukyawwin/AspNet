@page "/chat"
@using BlazorChatApp.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatApp.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@* @inject ChatService chatService *@
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveWebAssembly
<PageTitle>Chat</PageTitle>
<div class="row">
	<div class="col-lg-7">
		<div class="card">
			<AuthorizeView>
				<Authorized>
					<div class="card-header">Chat [@UserName]</div>
				</Authorized>
			</AuthorizeView>
			<div class="card-header">Chat</div>
			<div class="card-body">
				<ul class="list-group">
					@foreach (var chat in Chats)
					{
						<li class="list-group-item mb-2">
							@chat.Date.Date.ToString("dd/MMM/yy")
							<br />
							<span class="fw-bold">@chat.UserName:</span>
							<br />
							@chat.Message
						</li>
					}
				</ul>
				<div class="mt=3">
					<EditForm Model="Chat" OnValidSubmit="SendChat">
						<DataAnnotationsValidator />
						<div class="vstack gap-1">
							<InputText @bind-Value="Chat.UserName" class="form-control w-25" placeholder="Username" />
							<InputTextArea @bind-Value="Chat.Message" class="form-control mt-2" placeholder="Message" />
						</div>
						<button class="float-end btn btn-success mt-3" type="submit">Send</button>
					</EditForm>

				</div>
			</div>
			<div class="card-footer fw-bold">
				@if (!IsConnected)
				{
					<div class="alert alert-danger">
						Chat Disconnected
					</div>
				}
				else
				{
					<div class="alert alert-success">
						Chat Connected
					</div>
				}
			</div>
		</div>
	</div>
</div>


@code {
	private Chat Chat = new();
	private HubConnection? _hubConnection;
	public List<Chat> Chats { get; set; } = [];
	public string UserName { get; set; }
	protected override async Task OnInitializedAsync()
	{
		_hubConnection = new HubConnectionBuilder()
				.WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
				.Build();
		_hubConnection.On<Chat>("ReceiveMessage", (Chat) =>
			{

				Chats.Add(Chat);
				InvokeAsync(() => StateHasChanged());
			});
		await _hubConnection.StartAsync();
		var httpClient = new HttpClient();
		Chats = await httpClient.GetFromJsonAsync<List<Chat>>("https://localhost:7134/api/chat");
		await GetUserName();
	}
	public bool IsConnected => _hubConnection!.State == HubConnectionState.Connected;

	public void SendChat()
	{
		_hubConnection!.SendAsync("SendMessage", Chat);
		Chat.Message = null;
	}

	private async Task GetUserName()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		UserName = user?.Claims.Where(f => f.Type == ClaimTypes.Name).Last().Value ?? "Anonymous";
	}

}
