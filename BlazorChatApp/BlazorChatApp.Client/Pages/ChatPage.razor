@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly
<PageTitle>Chat</PageTitle>
<div class="row">
	<div class="col-lg-7">
		<div class="card">
			<div class="card-header">Chat</div>
			<div class="card-body">
				<ul class="list-group">
					@foreach(var message in Messages){
						<li class="mb-2">@message</li>
					}
				</ul>
				<div class="border-primary">
					<div class="hstack gap-2 mb-4">
						<input type="text" class="form-control w-25" @bind="userName"/>
						<textarea class="form-control " @bind="Message" />
						<button class="btn btn-success" @onclick="Send">Send</button>
					</div>
				</div>
			</div>
			<div class="card-footer">
				@if(!IsConnected){
					<div class="alert alert-danger">
						Chat Disconnected
						</div>
				}else{
					<div class="alert alert-success">
						Chat Connected
					</div>
				}
			</div>
		</div>
	</div>
</div>


@code {
	private HubConnection? hubConnection;
	private List<string> Messages = [];
	private string userName;
	public string? Message;
	private DateTime Date = DateTime.Now;

	protected async override Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
		.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
		.Build();

		hubConnection.On<string, string, DateTime>("ReceiveMessage", (userName, Message, Date) =>
		{
			var concatMessage = $"{Date}{Environment.NewLine}{userName}{Environment.NewLine}{Message}";
			Messages.Add(concatMessage);
			InvokeAsync(()=> StateHasChanged());
		});

		await hubConnection.StartAsync();
	}
	private bool IsConnected =>
	hubConnection!.State == HubConnectionState.Connected;

	Task Send() =>
	hubConnection!.SendAsync("SendMessage", userName, Message, Date);
}
